*finish

*comment This subroutine increments skills
*comment this should probably be a command...
*comment params:
*comment    GP_arg0 (string) - the skill to be incremented.
*comment return:
*comment    None
*label IncrementSkill
*if GP_arg0 = "Endurance"
    *set Endurance +1
*elseif GP_arg0 = "Strength"
    *set Strength +1
*elseif GP_arg0 = "Presence"
    *set Presence +1
*elseif GP_arg0 = "Courage"
    *set Courage +1
*elseif GP_arg0 = "ReactionSpeed"
    *set ReactionSpeed +1
*elseif GP_arg0 = "Stealth"
    *set Stealth +1
*elseif GP_arg0 = "MotorSkill"
    *set MotorSkill +1
*elseif GP_arg0 = "Acrobatics"
    *set Acrobatics +1
*elseif GP_arg0 = "Improvisation"
    *set Improvisation +1
*elseif GP_arg0 = "Knowledge"
    *set Knowledge +1
*elseif GP_arg0 = "Medical"
    *set Medical +1
*elseif GP_arg0 = "Speechcraft"
    *set Speechcraft +1
*else
    *bug Could not find "${GP_arg0}" to increment itâ€¦

*comment TODO: Add magic skills

*gosub UpdateAttributes 
*return

*comment This subroutine updates attributes based on skills
*comment params:
*comment    None
*comment return:
*comment    None

*label UpdateAttributes

*comment Current equations for interaction between attribute and skill values based on Attributes Documentation for after Phase 1
*comment These are the attribute totals after getting the average of the skills
*comment and then adding it to the base attribute values from Phase 1
*set Brawn_SKL_Total ((((Endurance + Strength) + Presence) + Courage) / 4)
*set Agility_SKL_Total ((((ReactionSpeed + Stealth) + MotorSkill) + Acrobatics) / 4)
*set Cunning_SKL_Total ((((Improvisation + Knowledge) + Medical) + Speechcraft) / 4)

*comment These are the attribute totals rounded down for cleaner display to the user
*comment and for use as whole numbers where every 4 skills is an attribute value increase
*set Brawn (Brawn_SKL_Total - (Brawn_SKL_Total modulo 1))
*set Agility (Agility_SKL_Total - (Agility_SKL_Total modulo 1))
*set Cunning (Cunning_SKL_Total - (Cunning_SKL_Total modulo 1))

*comment TODO: Add magic attribute

*return

*comment This function randomly determines if a random chance passes
*comment params:
*comment    GP_arg0 (attr) - the attribute to be tested.
*comment    GP_arg1 (succPercent) - what chance needs to be greater than.
*comment return:
*comment    returnData (bool) - returns if the check succeeded or failed.
*label AttributeSkillCheckBase

*temp attr GP_arg0
*temp succPercent GP_arg1

*temp rng 0
*rand rng 0 100

*set returnData (attr + succPercent) >= rng

*return

*comment This function randomly determines if a random chance passes
*comment WARNING: This subroutine replaces GP_arg1 with the corresponding success percentage.
*comment params:
*comment    GP_arg0 (attr) - the attribute to be tested.
*comment    GP_arg1 (difficulty) - Difficulty Level.
*comment return:
*comment    returnData (bool) - returns if the check succeeded or failed.
*label AttributeSkillCheck
*temp attr GP_arg0
*temp difficulty GP_arg1

*if (difficulty = "trivial")
    *set GP_arg1 80
    *gosub AttributeSkillCheckBase
    *return
*elseif (difficulty = "simple")
    *set GP_arg1 70
    *gosub AttributeSkillCheckBase
    *return
*elseif (difficulty = "moderate")
    *set GP_arg1 60
    *gosub AttributeSkillCheckBase
    *return
*elseif (difficulty = "challenging")
    *set GP_arg1 50
    *gosub AttributeSkillCheckBase
    *return
*elseif (difficulty = "difficult")
    *set GP_arg1 35
    *gosub AttributeSkillCheckBase
    *return
*elseif (difficulty = "extreme")
    *set GP_arg1 15
    *gosub AttributeSkillCheckBase
    *return
*elseif (difficulty = "impossible")
    *set returnData false
    *return
*bug Somehow, "RollChanceOnAttribute" failed. Is "${difficulty}" spelled correctly? 

*comment DUPLICATE!!!
*comment This subroutine calculates and sets all base attributes
*comment params:
*comment    NONE
*comment return:
*comment    NONE
*label CalcAllAttributes
*comment brawn sub-attributes
*set Brawn ((Endurance + Strength) + Presence) + Courage

*comment agility sub-attributes
*set Agility ((ReactionSpeed + Stealth) + MotorSkill) + Acrobatics



*comment Subroutine to generate a random number for the combat Chance variable on a separate page
*comment The random number in ChoiceScript typically needs to be generated before when you have to use it.
*comment This helps ensure that the player cannot keep regenerating the random number to one that favors them.
*label generate_combat_number
*rand Chance 1 100
*return

*comment This subroutine determines if the check succeeded using a random number and the relevant attribute value.
*label chance_checker

*set Chance + attrib

*if Chance >= chance_floor
    *set did_chance_check_succeed true
    *set Success Success + 1
    *if cur_fight_choice = "Brawn"
        *set brawn_fight_total brawn_fight_total + 1
    *elseif cur_fight_choice = "Agility"
        *set agility_fight_total agility_fight_total + 1
    *elseif cur_fight_choice = "Cunning"
        *set cunning_fight_total cunning_fight_total + 1
*else
    *set did_chance_check_succeed false
    *set Failure Failure + 1
    *if cur_fight_choice = "Brawn"
        *set brawn_fight_total brawn_fight_total + 1
    *elseif cur_fight_choice = "Agility"
        *set agility_fight_total agility_fight_total + 1
    *elseif cur_fight_choice = "Cunning"
        *set cunning_fight_total cunning_fight_total + 1

*return

*comment This subroutine does the success and failure checking
*label succeed_checker
[head]Success![/head]
*if did_chance_check_succeed = true
    *if cur_fight_choice = "Brawn"
        *if brawn_fight_total = 1
            *print description_text1

            *print victory_text1
        *elseif brawn_fight_total = 2
            *print description_text2

            *print victory_text2
        *elseif brawn_fight_total = 3
            *print description_text3

            *print victory_text3
        *elseif brawn_fight_total = 4
            *print description_text4
            
            *print victory_text4
        *elseif brawn_fight_total = 5
            *print description_text5
            *print victory_text5
    *elseif cur_fight_choice = "Agility"
        *if agility_fight_total = 1
            *print description_text1

            *print victory_text1
        *elseif agility_fight_total = 2
            *print description_text2
            *print victory_text2
        *elseif agility_fight_total = 3
            *print description_text3

            *print victory_text3
        *elseif agility_fight_total = 4
            *print description_text4

            *print victory_text4
        *elseif agility_fight_total = 5
            *print description_text5

            *print victory_text5
    *elseif cur_fight_choice = "Cunning"
        *if cunning_fight_total = 1
            *print description_text1

            *print victory_text1
        *elseif cunning_fight_total = 2
            *print description_text2

            *print victory_text2
        *elseif cunning_fight_total = 3
            *print description_text3

            *print victory_text3
        *elseif cunning_fight_total = 4
            *print description_text4

            *print victory_text4
        *elseif cunning_fight_total = 5
            *print description_text5

            *print victory_text5

    *if (Success >= 3) and (cur_fight_choice = "Brawn")
        [b]You won the fight![/b]
        *set win_encounter true
        *set win_attrib "Brawn"
    *elseif (Success >= 3) and (cur_fight_choice = "Agility")
        [b]You won the fight![/b]
        *set win_encounter true
        *set win_attrib "Agility"
    *elseif (Success >= 3) and (cur_fight_choice = "Cunning")
        [b]You won the fight![/b]
        *set win_encounter true
        *set win_attrib "Cunning"
        
*else
    [head]Failure![/head]
    *if cur_fight_choice = "Brawn"
        *if brawn_fight_total = 1
            *print description_text1

            *print failure_text1
        *elseif brawn_fight_total = 2
            *print description_text2

            *print failure_text2
        *elseif brawn_fight_total = 3
            *print description_text3

            *print failure_text3
        *elseif brawn_fight_total = 4
            *print description_text4

            *print failure_text4
        *elseif brawn_fight_total = 5
            *print description_text5

            *print failure_text5
    *elseif cur_fight_choice = "Agility"
        *if agility_fight_total = 1
            *print description_text1

            *print failure_text1
        *elseif agility_fight_total = 2
            *print description_text2

            *print failure_text2
        *elseif agility_fight_total = 3
            *print description_text3

            *print failure_text3
        *elseif agility_fight_total = 4
            *print description_text4

            *print failure_text4
        *elseif agility_fight_total = 5
            *print description_text5

            *print failure_text5
    *elseif cur_fight_choice = "Cunning"
        *if cunning_fight_total = 1
            *print description_text1

            *print failure_text1
        *elseif cunning_fight_total = 2
            *print description_text2

            *print failure_text2
        *elseif cunning_fight_total = 3
            *print description_text3

            *print failure_text3
        *elseif cunning_fight_total = 4
            *print description_text4

            *print failure_text4
        *elseif cunning_fight_total = 5
            *print description_text5
            
            *print failure_text5

    *if (Failure >= 3) and (cur_fight_choice = "Brawn")
        [b]You lost the fight![/b]
        *set fail_encounter true
        *set fail_attrib "Brawn"
    *elseif (Failure >= 3) and (cur_fight_choice = "Agility")
        [b]You lost the fight![/b]
        *set fail_encounter true
        *set fail_attrib "Agility"
    *elseif (Failure >= 3) and (cur_fight_choice = "Cunning")
        [b]You lost the fight![/b]
        *set fail_encounter true
        *set fail_attrib "Cunning"
    
*return



*comment Originally in the choicescript_stats scene, now a subroutine in the general scene for organization purposes
*comment Updates the relationship and reputation percentages, trends, and affinity/rep statuses
*label UpdateRelRepMeters
*comment Checks to ensure that the relationship values are not negative, else it corrects them to positive
*if rel_val_Cel > 0
    *set relationship_Cel_percentage ((rel_val_Cel modulo relationship_max_xp) / relationship_max_xp) * 100
*else
    *set relationship_Cel_percentage (((rel_val_Cel * (0 - 1)) modulo relationship_max_xp) / relationship_max_xp) * 100
*if rel_val_Berthold > 0
    *set relationship_Berthold_percentage ((rel_val_Berthold modulo relationship_max_xp) / relationship_max_xp) * 100
*else
    *set relationship_Berthold_percentage (((rel_val_Berthold * (0 - 1)) modulo relationship_max_xp) / relationship_max_xp) * 100
*if rel_val_Ivy > 0
    *set relationship_Ivy_percentage ((rel_val_Ivy modulo relationship_max_xp) / relationship_max_xp) * 100
*else
    *set relationship_Ivy_percentage (((rel_val_Ivy * (0 - 1)) modulo relationship_max_xp) / relationship_max_xp) * 100
*if rel_val_Riva > 0
    *set relationship_Riva_percentage ((rel_val_Riva modulo relationship_max_xp) / relationship_max_xp) * 100
*else
    *set relationship_Riva_percentage (((rel_val_Riva * (0 - 1)) modulo relationship_max_xp) / relationship_max_xp) * 100
*if rel_val_Winfred > 0
    *set relationship_Winfred_percentage ((rel_val_Winfred modulo relationship_max_xp) / relationship_max_xp) * 100
*else
    *set relationship_Winfred_percentage (((rel_val_Winfred * (0 - 1)) modulo relationship_max_xp) / relationship_max_xp) * 100

*if rel_val_Rip > 0
    *set relationship_Rip_percentage ((rel_val_Rip modulo relationship_max_xp) / relationship_max_xp) * 100
*else
    *set relationship_Rip_percentage (((rel_val_Rip * (0 - 1)) modulo relationship_max_xp) / relationship_max_xp) * 100
*if rel_val_Anwen > 0
    *set relationship_Anwen_percentage ((rel_val_Anwen modulo relationship_max_xp) / relationship_max_xp) * 100
*else
    *set relationship_Anwen_percentage (((rel_val_Anwen * (0 - 1)) modulo relationship_max_xp) / relationship_max_xp) * 100
*if rel_val_Elena > 0
    *set relationship_Elena_percentage ((rel_val_Elena modulo relationship_max_xp) / relationship_max_xp) * 100
*else
    *set relationship_Elena_percentage (((rel_val_Elena * (0 - 1)) modulo relationship_max_xp) / relationship_max_xp) * 100
*if rel_val_Gwyn > 0
    *set relationship_Gwyn_percentage ((rel_val_Gwyn modulo relationship_max_xp) / relationship_max_xp) * 100
*else
    *set relationship_Gwyn_percentage (((rel_val_Gwyn * (0 - 1)) modulo relationship_max_xp) / relationship_max_xp) * 100
*if rel_val_Leon > 0
    *set relationship_Leon_percentage ((rel_val_Leon modulo relationship_max_xp) / relationship_max_xp) * 100
*else
    *set relationship_Leon_percentage (((rel_val_Leon * (0 - 1)) modulo relationship_max_xp) / relationship_max_xp) * 100

*comment This cleans up the decimal of the percentage for better user display
*set relationship_Cel_percentage relationship_Cel_percentage - (relationship_Cel_percentage modulo 1)
*set relationship_Berthold_percentage relationship_Berthold_percentage - (relationship_Berthold_percentage modulo 1)
*set relationship_Ivy_percentage relationship_Ivy_percentage - (relationship_Ivy_percentage modulo 1)
*set relationship_Riva_percentage relationship_Riva_percentage - (relationship_Riva_percentage modulo 1)
*set relationship_Winfred_percentage relationship_Winfred_percentage - (relationship_Winfred_percentage modulo 1)

*set relationship_Rip_percentage relationship_Rip_percentage - (relationship_Rip_percentage modulo 1)
*set relationship_Anwen_percentage relationship_Anwen_percentage - (relationship_Anwen_percentage modulo 1)
*set relationship_Elena_percentage relationship_Elena_percentage - (relationship_Elena_percentage modulo 1)
*set relationship_Gwyn_percentage relationship_Gwyn_percentage - (relationship_Gwyn_percentage modulo 1)
*set relationship_Leon_percentage relationship_Leon_percentage - (relationship_Leon_percentage modulo 1)

*comment Checks the relationship values and sets the affinity status of Cel
*if (rel_val_Cel > (0 - 250)) and (rel_val_Cel < 250)
    *set rel_status_Cel rel_status_4
    *if rel_val_Cel < 0
        *set trend_Cel "Negative"
    *elseif rel_val_Cel > 0
        *set trend_Cel "Positive"
    *elseif rel_val_Cel = 0
        *set trend_Cel "N/A"
*elseif rel_val_Cel < 0
    *set trend_Cel "Negative"
    *if (rel_val_Cel < (0 - 250)) and (rel_val_Cel > ((0 - 250) - 250))
        *set rel_status_Cel rel_status_5
    *elseif (rel_val_Cel < ((0 - 250) - 250)) and (rel_val_Cel > ((0 - 250) - 500))
        *set rel_status_Cel rel_status_6
    *elseif (rel_val_Cel < ((0 - 250) - 500)) and (rel_val_Cel > ((0 - 250) - 750))
        *set rel_status_Cel rel_status_7
    *elseif (rel_val_Cel <= ((0 - 250) - 750))
        *set rel_status_Cel rel_status_8
        *set relationship_Cel_percentage 100
        *set rel_val_Cel (0 - 1000)
*elseif rel_val_Cel > 0
    *set trend_Cel "Positive"
    *if (rel_val_Cel > 250) and (rel_val_Cel < 500)
        *set rel_status_Cel rel_status_3
    *elseif (rel_val_Cel > 500) and (rel_val_Cel < 750)
        *set rel_status_Cel rel_status_2
    *elseif (rel_val_Cel > 750) and (rel_val_Cel < 1000)
        *set rel_status_Cel rel_status_1
    *elseif rel_val_Cel >= 1000
        *set rel_status_Cel rel_status_0
        *set relationship_Cel_percentage 100
        *set rel_val_Cel 1000
*else
    *set rel_status_Cel rel_status_4

*comment Checks the relationship values and sets the affinity status of Berthold
*if (rel_val_Berthold > (0 - 250)) and (rel_val_Berthold < 250)
    *set rel_status_Berthold rel_status_4
    *if rel_val_Berthold < 0
        *set trend_Berthold "Negative"
    *elseif rel_val_Berthold > 0
        *set trend_Berthold "Positive"
    *elseif rel_val_Berthold = 0
        *set trend_Berthold "N/A"
*elseif rel_val_Berthold < 0
    *set trend_Berthold "Negative"
    *if (rel_val_Berthold < (0 - 250)) and (rel_val_Berthold > ((0 - 250) - 250))
        *set rel_status_Berthold rel_status_5
    *elseif (rel_val_Berthold < ((0 - 250) - 250)) and (rel_val_Berthold > ((0 - 250) - 500))
        *set rel_status_Berthold rel_status_6
    *elseif (rel_val_Berthold < ((0 - 250) - 500)) and (rel_val_Berthold > ((0 - 250) - 750))
        *set rel_status_Berthold rel_status_7
    *elseif (rel_val_Berthold <= ((0 - 250) - 750))
        *set rel_status_Berthold rel_status_8
        *set relationship_Berthold_percentage 100
        *set rel_val_Berthold (0 - 1000)
*elseif rel_val_Berthold > 0
    *set trend_Berthold "Positive"
    *if (rel_val_Berthold > 250) and (rel_val_Berthold < 500)
        *set rel_status_Berthold rel_status_3
    *elseif (rel_val_Berthold > 500) and (rel_val_Berthold < 750)
        *set rel_status_Berthold rel_status_2
    *elseif (rel_val_Berthold > 750) and (rel_val_Berthold < 1000)
        *set rel_status_Berthold rel_status_1
    *elseif rel_val_Berthold >= 1000
        *set rel_status_Berthold rel_status_0
        *set relationship_Berthold_percentage 100
        *set rel_val_Berthold 1000
*else
    *set rel_status_Berthold rel_status_4

*comment Checks the relationship values and sets the affinity status of Ivy
*if (rel_val_Ivy > (0 - 250)) and (rel_val_Ivy < 250)
    *set rel_status_Ivy rel_status_4
    *if rel_val_Ivy < 0
        *set trend_Ivy "Negative"
    *elseif rel_val_Ivy > 0
        *set trend_Ivy "Positive"
    *elseif rel_val_Ivy = 0
        *set trend_Ivy "N/A"
*elseif rel_val_Ivy < 0
    *set trend_Ivy "Negative"
    *if (rel_val_Ivy < (0 - 250)) and (rel_val_Ivy > ((0 - 250) - 250))
        *set rel_status_Ivy rel_status_5
    *elseif (rel_val_Ivy < ((0 - 250) - 250)) and (rel_val_Ivy > ((0 - 250) - 500))
        *set rel_status_Ivy rel_status_6
    *elseif (rel_val_Ivy < ((0 - 250) - 500)) and (rel_val_Ivy > ((0 - 250) - 750))
        *set rel_status_Ivy rel_status_7
    *elseif (rel_val_Ivy <= ((0 - 250) - 750))
        *set rel_status_Ivy rel_status_8
        *set relationship_Ivy_percentage 100
        *set rel_val_Ivy (0 - 1000)
*elseif rel_val_Ivy > 0
    *set trend_Ivy "Positive"
    *if (rel_val_Ivy > 250) and (rel_val_Ivy < 500)
        *set rel_status_Ivy rel_status_3
    *elseif (rel_val_Ivy > 500) and (rel_val_Ivy < 750)
        *set rel_status_Ivy rel_status_2
    *elseif (rel_val_Ivy > 750) and (rel_val_Ivy < 1000)
        *set rel_status_Ivy rel_status_1
    *elseif rel_val_Ivy >= 1000
        *set rel_status_Ivy rel_status_0
        *set relationship_Ivy_percentage 100
        *set rel_val_Ivy 1000
*else
    *set rel_status_Ivy rel_status_4

*comment Checks the relationship values and sets the affinity status of Riva
*if (rel_val_Riva > (0 - 250)) and (rel_val_Riva < 250)
    *set rel_status_Riva rel_status_4
    *if rel_val_Riva < 0
        *set trend_Riva "Negative"
    *elseif rel_val_Riva > 0
        *set trend_Riva "Positive"
    *elseif rel_val_Riva = 0
        *set trend_Riva "N/A"
*elseif rel_val_Riva < 0
    *set trend_Riva "Negative"
    *if (rel_val_Riva < (0 - 250)) and (rel_val_Riva > ((0 - 250) - 250))
        *set rel_status_Riva rel_status_5
    *elseif (rel_val_Riva < ((0 - 250) - 250)) and (rel_val_Riva > ((0 - 250) - 500))
        *set rel_status_Riva rel_status_6
    *elseif (rel_val_Riva < ((0 - 250) - 500)) and (rel_val_Riva > ((0 - 250) - 750))
        *set rel_status_Riva rel_status_7
    *elseif (rel_val_Riva <= ((0 - 250) - 750))
        *set rel_status_Riva rel_status_8
        *set relationship_Riva_percentage 100
        *set rel_val_Riva (0 - 1000)
*elseif rel_val_Riva > 0
    *set trend_Riva "Positive"
    *if (rel_val_Riva > 250) and (rel_val_Riva < 500)
        *set rel_status_Riva rel_status_3
    *elseif (rel_val_Riva > 500) and (rel_val_Riva < 750)
        *set rel_status_Riva rel_status_2
    *elseif (rel_val_Riva > 750) and (rel_val_Riva < 1000)
        *set rel_status_Riva rel_status_1
    *elseif rel_val_Riva >= 1000
        *set rel_status_Riva rel_status_0
        *set relationship_Riva_percentage 100
        *set rel_val_Riva 1000
*else
    *set rel_status_Ivy rel_status_4

*comment Checks the relationship values and sets the affinity status of Winfred
*if (rel_val_Winfred > (0 - 250)) and (rel_val_Winfred < 250)
    *set rel_status_Winfred rel_status_4
    *if rel_val_Winfred < 0
        *set trend_Winfred "Negative"
    *elseif rel_val_Winfred > 0
        *set trend_Winfred "Positive"
    *elseif rel_val_Winfred = 0
        *set trend_Winfred "N/A"
*elseif rel_val_Winfred < 0
    *set trend_Winfred "Negative"
    *if (rel_val_Winfred < (0 - 250)) and (rel_val_Winfred > ((0 - 250) - 250))
        *set rel_status_Winfred rel_status_5
    *elseif (rel_val_Winfred < ((0 - 250) - 250)) and (rel_val_Winfred > ((0 - 250) - 500))
        *set rel_status_Winfred rel_status_6
    *elseif (rel_val_Winfred < ((0 - 250) - 500)) and (rel_val_Winfred > ((0 - 250) - 750))
        *set rel_status_Winfred rel_status_7
    *elseif (rel_val_Winfred <= ((0 - 250) - 750))
        *set rel_status_Winfred rel_status_8
        *set relationship_Winfred_percentage 100
        *set rel_val_Winfred (0 - 1000)
*elseif rel_val_Winfred > 0
    *set trend_Winfred "Positive"
    *if (rel_val_Winfred > 250) and (rel_val_Winfred < 500)
        *set rel_status_Winfred rel_status_3
    *elseif (rel_val_Winfred > 500) and (rel_val_Winfred < 750)
        *set rel_status_Winfred rel_status_2
    *elseif (rel_val_Winfred > 750) and (rel_val_Winfred < 1000)
        *set rel_status_Winfred rel_status_1
    *elseif rel_val_Winfred >= 1000
        *set rel_status_Winfred rel_status_0
        *set relationship_Winfred_percentage 100
        *set rel_val_Winfred 1000
*else
    *set rel_status_Winfred rel_status_4

*comment Checks the relationship values and sets the affinity status of Rip
*if (rel_val_Rip > (0 - 250)) and (rel_val_Rip < 250)
    *set rel_status_Rip rel_status_4
    *if rel_val_Rip < 0
        *set trend_Rip "Negative"
    *elseif rel_val_Rip > 0
        *set trend_Rip "Positive"
    *elseif rel_val_Rip = 0
        *set trend_Rip "N/A"
*elseif rel_val_Rip < 0
    *set trend_Rip "Negative"
    *if (rel_val_Rip < (0 - 250)) and (rel_val_Rip > ((0 - 250) - 250))
        *set rel_status_Rip rel_status_5
    *elseif (rel_val_Rip < ((0 - 250) - 250)) and (rel_val_Rip > ((0 - 250) - 500))
        *set rel_status_Rip rel_status_6
    *elseif (rel_val_Rip < ((0 - 250) - 500)) and (rel_val_Rip > ((0 - 250) - 750))
        *set rel_status_Rip rel_status_7
    *elseif (rel_val_Rip <= ((0 - 250) - 750))
        *set rel_status_Rip rel_status_8
        *set relationship_Rip_percentage 100
        *set rel_val_Rip (0 - 1000)
*elseif rel_val_Rip > 0
    *set trend_Rip "Positive"
    *if (rel_val_Rip > 250) and (rel_val_Rip < 500)
        *set rel_status_Rip rel_status_3
    *elseif (rel_val_Rip > 500) and (rel_val_Rip < 750)
        *set rel_status_Rip rel_status_2
    *elseif (rel_val_Rip > 750) and (rel_val_Rip < 1000)
        *set rel_status_Rip rel_status_1
    *elseif rel_val_Rip >= 1000
        *set rel_status_Rip rel_status_0
        *set relationship_Rip_percentage 100
        *set rel_val_Rip 1000
*else
    *set rel_status_Rip rel_status_4

*comment Checks the relationship values and sets the affinity status of Anwen
*if (rel_val_Anwen > (0 - 250)) and (rel_val_Anwen < 250)
    *set rel_status_Anwen rel_status_4
    *if rel_val_Anwen < 0
        *set trend_Anwen "Negative"
    *elseif rel_val_Anwen > 0
        *set trend_Anwen "Positive"
    *elseif rel_val_Anwen = 0
        *set trend_Anwen "N/A"
*elseif rel_val_Anwen < 0
    *set trend_Anwen "Negative"
    *if (rel_val_Anwen < (0 - 250)) and (rel_val_Anwen > ((0 - 250) - 250))
        *set rel_status_Anwen rel_status_5
    *elseif (rel_val_Anwen < ((0 - 250) - 250)) and (rel_val_Anwen > ((0 - 250) - 500))
        *set rel_status_Anwen rel_status_6
    *elseif (rel_val_Anwen < ((0 - 250) - 500)) and (rel_val_Anwen > ((0 - 250) - 750))
        *set rel_status_Anwen rel_status_7
    *elseif (rel_val_Anwen <= ((0 - 250) - 750))
        *set rel_status_Anwen rel_status_8
        *set relationship_Anwen_percentage 100
        *set rel_val_Anwen (0 - 1000)
*elseif rel_val_Anwen > 0
    *set trend_Anwen "Positive"
    *if (rel_val_Anwen > 250) and (rel_val_Anwen < 500)
        *set rel_status_Anwen rel_status_3
    *elseif (rel_val_Anwen > 500) and (rel_val_Anwen < 750)
        *set rel_status_Anwen rel_status_2
    *elseif (rel_val_Anwen > 750) and (rel_val_Anwen < 1000)
        *set rel_status_Anwen rel_status_1
    *elseif rel_val_Anwen >= 1000
        *set rel_status_Anwen rel_status_0
        *set relationship_Anwen_percentage 100
        *set rel_val_Anwen 1000
*else
    *set rel_status_Anwen rel_status_4

*comment Checks the relationship values and sets the affinity status of Elena
*if (rel_val_Elena > (0 - 250)) and (rel_val_Elena < 250)
    *set rel_status_Elena rel_status_4
    *if rel_val_Elena < 0
        *set trend_Elena "Negative"
    *elseif rel_val_Elena > 0
        *set trend_Elena "Positive"
    *elseif rel_val_Elena = 0
        *set trend_Elena "N/A"
*elseif rel_val_Elena < 0
    *set trend_Elena "Negative"
    *if (rel_val_Elena < (0 - 250)) and (rel_val_Elena > ((0 - 250) - 250))
        *set rel_status_Elena rel_status_5
    *elseif (rel_val_Elena < ((0 - 250) - 250)) and (rel_val_Elena > ((0 - 250) - 500))
        *set rel_status_Elena rel_status_6
    *elseif (rel_val_Elena < ((0 - 250) - 500)) and (rel_val_Elena > ((0 - 250) - 750))
        *set rel_status_Elena rel_status_7
    *elseif (rel_val_Elena <= ((0 - 250) - 750))
        *set rel_status_Elena rel_status_8
        *set relationship_Elena_percentage 100
        *set rel_val_Elena (0 - 1000)
*elseif rel_val_Elena > 0
    *set trend_Elena "Positive"
    *if (rel_val_Elena > 250) and (rel_val_Elena < 500)
        *set rel_status_Elena rel_status_3
    *elseif (rel_val_Elena > 500) and (rel_val_Elena < 750)
        *set rel_status_Elena rel_status_2
    *elseif (rel_val_Elena > 750) and (rel_val_Elena < 1000)
        *set rel_status_Elena rel_status_1
    *elseif rel_val_Elena >= 1000
        *set rel_status_Elena rel_status_0
        *set relationship_Elena_percentage 100
        *set rel_val_Elena 1000
*else
    *set rel_status_Elena rel_status_4

*comment Checks the relationship values and sets the affinity status of Gwyn
*if (rel_val_Gwyn > (0 - 250)) and (rel_val_Gwyn < 250)
    *set rel_status_Gwyn rel_status_4
    *if rel_val_Gwyn < 0
        *set trend_Gwyn "Negative"
    *elseif rel_val_Gwyn > 0
        *set trend_Gwyn "Positive"
    *elseif rel_val_Gwyn = 0
        *set trend_Gwyn "N/A"
*elseif rel_val_Gwyn < 0
    *set trend_Gwyn "Negative"
    *if (rel_val_Gwyn < (0 - 250)) and (rel_val_Gwyn > ((0 - 250) - 250))
        *set rel_status_Gwyn rel_status_5
    *elseif (rel_val_Gwyn < ((0 - 250) - 250)) and (rel_val_Gwyn > ((0 - 250) - 500))
        *set rel_status_Gwyn rel_status_6
    *elseif (rel_val_Gwyn < ((0 - 250) - 500)) and (rel_val_Gwyn > ((0 - 250) - 750))
        *set rel_status_Gwyn rel_status_7
    *elseif (rel_val_Gwyn <= ((0 - 250) - 750))
        *set rel_status_Gwyn rel_status_8
        *set relationship_Gwyn_percentage 100
        *set rel_val_Gwyn (0 - 1000)
*elseif rel_val_Gwyn > 0
    *set trend_Gwyn "Positive"
    *if (rel_val_Gwyn > 250) and (rel_val_Gwyn < 500)
        *set rel_status_Gwyn rel_status_3
    *elseif (rel_val_Gwyn > 500) and (rel_val_Gwyn < 750)
        *set rel_status_Gwyn rel_status_2
    *elseif (rel_val_Gwyn > 750) and (rel_val_Gwyn < 1000)
        *set rel_status_Gwyn rel_status_1
    *elseif rel_val_Gwyn >= 1000
        *set rel_status_Gwyn rel_status_0
        *set relationship_Gwyn_percentage 100
        *set rel_val_Gwyn 1000
*else
    *set rel_status_Gwyn rel_status_4

*comment Checks the relationship values and sets the affinity status of Leon
*if (rel_val_Leon > (0 - 250)) and (rel_val_Leon < 250)
    *set rel_status_Leon rel_status_4
    *if rel_val_Leon < 0
        *set trend_Leon "Negative"
    *elseif rel_val_Leon > 0
        *set trend_Leon "Positive"
    *elseif rel_val_Leon = 0
        *set trend_Leon "N/A"
*elseif rel_val_Leon < 0
    *set trend_Leon "Negative"
    *if (rel_val_Leon < (0 - 250)) and (rel_val_Leon > ((0 - 250) - 250))
        *set rel_status_Leon rel_status_5
    *elseif (rel_val_Leon < ((0 - 250) - 250)) and (rel_val_Leon > ((0 - 250) - 500))
        *set rel_status_Leon rel_status_6
    *elseif (rel_val_Leon < ((0 - 250) - 500)) and (rel_val_Leon > ((0 - 250) - 750))
        *set rel_status_Leon rel_status_7
    *elseif (rel_val_Leon <= ((0 - 250) - 750))
        *set rel_status_Leon rel_status_8
        *set relationship_Leon_percentage 100
        *set rel_val_Leon (0 - 1000)
*elseif rel_val_Leon > 0
    *set trend_Leon "Positive"
    *if (rel_val_Leon > 250) and (rel_val_Leon < 500)
        *set rel_status_Leon rel_status_3
    *elseif (rel_val_Leon > 500) and (rel_val_Leon < 750)
        *set rel_status_Leon rel_status_2
    *elseif (rel_val_Leon > 750) and (rel_val_Leon < 1000)
        *set rel_status_Leon rel_status_1
    *elseif rel_val_Leon >= 1000
        *set rel_status_Leon rel_status_0
        *set relationship_Leon_percentage 100
        *set rel_val_Leon 1000
*else
    *set rel_status_Leon rel_status_4
    
*comment Checks to ensure that the reputation values are not negative, else it corrects them to positive
*if rep_val_Flames > 0
    *set reputation_Flames_percentage ((rep_val_Flames modulo reputation_max_xp) / reputation_max_xp) * 100
*else
    *set reputation_Flames_percentage (((rep_val_Flames * (0 - 1)) modulo reputation_max_xp) / reputation_max_xp) * 100
*if rep_val_Wolves > 0
    *set reputation_Wolves_percentage ((rep_val_Wolves modulo reputation_max_xp) / reputation_max_xp) * 100
*else
    *set reputation_Wolves_percentage (((rep_val_Wolves * (0 - 1)) modulo reputation_max_xp) / reputation_max_xp) * 100

*comment This cleans up the decimal of the percentage for better user display
*set reputation_Flames_percentage reputation_Flames_percentage - (reputation_Flames_percentage modulo 1)
*set reputation_Wolves_percentage reputation_Wolves_percentage - (reputation_Wolves_percentage modulo 1)

*comment Checks the reputation values and sets the status of Flames
*if (rep_val_Flames > (0 - 50)) and (rep_val_Flames < 50)
    *set rep_status_Flames rep_status_2
    *if rep_val_Flames < 0
        *set trend_Flames "Negative"
    *elseif rep_val_Flames > 0
        *set trend_Flames "Positive"
    *elseif rep_val_Flames = 0
        *set trend_Flames "N/A"
*elseif rep_val_Flames < 0
    *set trend_Flames "Negative"
    *if (rep_val_Flames < (0 - 50)) and (rep_val_Flames > ((0 - 50) - 50))
        *set rep_status_Flames rep_status_3
    *elseif rep_val_Flames <= ((0 - 50) - 50)
        *set rep_status_Flames rep_status_4
        *set reputation_Flames_percentage 100
        *set rep_val_Flames (0 - 100)
*elseif rep_val_Flames > 0
    *set trend_Flames "Positive"
    *if (rep_val_Flames > 50) and (rep_val_Flames < 100)
        *set rep_status_Flames rep_status_1
    *elseif rep_val_Flames >= 100
        *set rep_status_Flames rep_status_0
        *set reputation_Flames_percentage 100
        *set rep_val_Flames 100
*else
    *set rep_val_Flames rep_status_2

*comment Checks the reputation values and sets the status of Wolves
*if (rep_val_Wolves > (0 - 50)) and (rep_val_Wolves < 50)
    *set rep_status_Wolves rep_status_2
    *if rep_val_Wolves < 0
        *set trend_Wolves "Negative"
    *elseif rep_val_Wolves > 0
        *set trend_Wolves "Positive"
    *elseif rep_val_Wolves = 0
        *set trend_Wolves "N/A"
*elseif rep_val_Wolves < 0
    *set trend_Wolves "Negative"
    *if (rep_val_Wolves < (0 - 50)) and (rep_val_Wolves > ((0 - 50) - 50))
        *set rep_status_Wolves rep_status_3
    *elseif rep_val_Wolves <= ((0 - 50) - 50)
        *set rep_status_Wolves rep_status_4
        *set reputation_Wolves_percentage 100
        *set rep_val_Wolves (0 - 100)
*elseif rep_val_Wolves > 0
    *set trend_Wolves "Positive"
    *if (rep_val_Wolves > 50) and (rep_val_Wolves < 100)
        *set rep_status_Wolves rep_status_1
    *elseif rep_val_Wolves >= 100
        *set rep_status_Wolves rep_status_0
        *set reputation_Wolves_percentage 100
        *set rep_val_Wolves 100
*else
    *set rep_val_Wolves rep_status_2

*return

*comment This subroutine updates the affinity effect based on the status of player's reputation with the Flames
*label UpdateCurrentAffinityEffectFlames
*if rep_status_Flames = rep_status_0
    *set cur_affinity_effect_Flames 0.25
*elseif rep_status_Flames = rep_status_1
    *set cur_affinity_effect_Flames 0.1
*elseif rep_status_Flames = rep_status_2
    *set cur_affinity_effect_Flames 0
*elseif rep_status_Flames = rep_status_3
    *set cur_affinity_effect_Flames -0.1
*elseif rep_status_Flames = rep_status_4
    *set cur_affinity_effect_Flames -0.25
*return

*comment This subroutine updates the affinity effect based on the status of player's reputation with the Wolves
*label UpdateCurrentAffinityEffectWolves
*if rep_status_Wolves = rep_status_0
    *set cur_affinity_effect_Wolves 0.25
*elseif rep_status_Wolves = rep_status_1
    *set cur_affinity_effect_Wolves 0.1
*elseif rep_status_Wolves = rep_status_2
    *set cur_affinity_effect_Wolves 0
*elseif rep_status_Wolves = rep_status_3
    *set cur_affinity_effect_Wolves -0.1
*elseif rep_status_Wolves = rep_status_4
    *set cur_affinity_effect_Wolves -0.25
*return

*comment This subroutine updates the personality reaction of Cel based on the current behavior as exhibited by the player's choice
*label UpdateReactionCel
*gosub UpdateCurrentAffinityEffectFlames

*if cur_behavior_tag = tag_Generous
    *set cur_personality_reaction_Cel (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Nice
    *set cur_personality_reaction_Cel (reaction_liked * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Peaceful
    *set cur_personality_reaction_Cel (reaction_agree * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Selfish
    *set cur_personality_reaction_Cel ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Mean
    *set cur_personality_reaction_Cel ((reaction_disliked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Violent
    *set cur_personality_reaction_Cel ((reaction_disagree * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Murdering
    *set cur_personality_reaction_Cel ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Slaying
    *set cur_personality_reaction_Cel (reaction_agree * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Stealing
    *set cur_personality_reaction_Cel ((reaction_disliked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Divine
    *set cur_personality_reaction_Cel (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Arcane
    *set cur_personality_reaction_Cel (reaction_neutral * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_f_Helping
    *set cur_personality_reaction_Cel (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_f_Hindering
    *set cur_personality_reaction_Cel ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*return

*comment This subroutine updates the personality reaction of Ivy based on the current behavior as exhibited by the player's choice
*label UpdateReactionIvy
*gosub UpdateCurrentAffinityEffectFlames

*if cur_behavior_tag = tag_Generous
    *set cur_personality_reaction_Ivy (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Nice
    *set cur_personality_reaction_Ivy (reaction_liked * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Peaceful
    *set cur_personality_reaction_Ivy (reaction_agree * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Selfish
    *set cur_personality_reaction_Ivy ((reaction_disliked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Mean
    *set cur_personality_reaction_Ivy ((reaction_disliked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Violent
    *set cur_personality_reaction_Ivy ((reaction_disagree * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Murdering
    *set cur_personality_reaction_Ivy ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Slaying
    *set cur_personality_reaction_Ivy (reaction_agree * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Stealing
    *set cur_personality_reaction_Ivy ((reaction_disliked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Divine
    *set cur_personality_reaction_Ivy (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Arcane
    *set cur_personality_reaction_Ivy (reaction_neutral * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_f_Helping
    *set cur_personality_reaction_Ivy (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_f_Hindering
    *set cur_personality_reaction_Ivy ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*return

*comment This subroutine updates the personality reaction of Berthold based on the current behavior as exhibited by the player's choice
*label UpdateReactionBerthold
*gosub UpdateCurrentAffinityEffectFlames

*if cur_behavior_tag = tag_Generous
    *set cur_personality_reaction_Berthold (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Nice
    *set cur_personality_reaction_Berthold (reaction_liked * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Peaceful
    *set cur_personality_reaction_Berthold (reaction_agree * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Selfish
    *set cur_personality_reaction_Berthold ((reaction_disliked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Mean
    *set cur_personality_reaction_Berthold ((reaction_disliked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Violent
    *set cur_personality_reaction_Berthold ((reaction_disagree * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Murdering
    *set cur_personality_reaction_Berthold ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Slaying
    *set cur_personality_reaction_Berthold (reaction_agree * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Stealing
    *set cur_personality_reaction_Berthold ((reaction_disliked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Divine
    *set cur_personality_reaction_Berthold (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Arcane
    *set cur_personality_reaction_Berthold (reaction_neutral * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_f_Helping
    *set cur_personality_reaction_Berthold (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_f_Hindering
    *set cur_personality_reaction_Berthold ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*return

*comment This subroutine updates the personality reaction of Riva based on the current behavior as exhibited by the player's choice
*label UpdateReactionRiva
*gosub UpdateCurrentAffinityEffectFlames

*if cur_behavior_tag = tag_Generous
    *set cur_personality_reaction_Riva (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Nice
    *set cur_personality_reaction_Riva (reaction_liked * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Peaceful
    *set cur_personality_reaction_Riva (reaction_agree * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Selfish
    *set cur_personality_reaction_Riva ((reaction_disliked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Mean
    *set cur_personality_reaction_Riva ((reaction_disliked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Violent
    *set cur_personality_reaction_Riva ((reaction_disagree * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Murdering
    *set cur_personality_reaction_Riva ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Slaying
    *set cur_personality_reaction_Riva (reaction_agree * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Stealing
    *set cur_personality_reaction_Riva ((reaction_disagree * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Divine
    *set cur_personality_reaction_Riva (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Arcane
    *set cur_personality_reaction_Riva (reaction_neutral * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_f_Helping
    *set cur_personality_reaction_Riva (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_f_Hindering
    *set cur_personality_reaction_Riva ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*return

*comment This subroutine updates the personality reaction of Winfred based on the current behavior as exhibited by the player's choice
*label UpdateReactionWinfred
*gosub UpdateCurrentAffinityEffectFlames

*if cur_behavior_tag = tag_Generous
    *set cur_personality_reaction_Winfred (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Nice
    *set cur_personality_reaction_Winfred (reaction_liked * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Peaceful
    *set cur_personality_reaction_Winfred (reaction_agree * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Selfish
    *set cur_personality_reaction_Winfred ((reaction_disliked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Mean
    *set cur_personality_reaction_Winfred ((reaction_disliked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Violent
    *set cur_personality_reaction_Winfred ((reaction_disagree * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Murdering
    *set cur_personality_reaction_Winfred ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Slaying
    *set cur_personality_reaction_Winfred (reaction_agree * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Stealing
    *set cur_personality_reaction_Winfred ((reaction_disliked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Divine
    *set cur_personality_reaction_Winfred (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_Arcane
    *set cur_personality_reaction_Winfred (reaction_neutral * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_f_Helping
    *set cur_personality_reaction_Winfred (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Flames))
*elseif cur_behavior_tag = tag_f_Hindering
    *set cur_personality_reaction_Winfred ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Flames))
*return

*comment This subroutine updates the personality reaction of Rip based on the current behavior as exhibited by the player's choice
*label UpdateReactionRip
*gosub UpdateCurrentAffinityEffectWolves

*if cur_behavior_tag = tag_Generous
    *set cur_personality_reaction_Rip (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Nice
    *set cur_personality_reaction_Rip (reaction_agree * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Peaceful
    *set cur_personality_reaction_Rip (reaction_disagree * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Selfish
    *set cur_personality_reaction_Rip ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Mean
    *set cur_personality_reaction_Rip ((reaction_disagree * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Violent
    *set cur_personality_reaction_Rip ((reaction_agree * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Murdering
    *set cur_personality_reaction_Rip ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Slaying
    *set cur_personality_reaction_Rip (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Stealing
    *set cur_personality_reaction_Rip ((reaction_disliked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Divine
    *set cur_personality_reaction_Rip (reaction_neutral * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Arcane
    *set cur_personality_reaction_Rip (reaction_neutral * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_f_Helping
    *set cur_personality_reaction_Rip (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_f_Hindering
    *set cur_personality_reaction_Rip ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*return

*comment This subroutine updates the personality reaction of Anwen based on the current behavior as exhibited by the player's choice
*label UpdateReactionAnwen
*gosub UpdateCurrentAffinityEffectWolves

*if cur_behavior_tag = tag_Generous
    *set cur_personality_reaction_Anwen (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Nice
    *set cur_personality_reaction_Anwen (reaction_agree * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Peaceful
    *set cur_personality_reaction_Anwen (reaction_disliked * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Selfish
    *set cur_personality_reaction_Anwen ((reaction_disliked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Mean
    *set cur_personality_reaction_Anwen ((reaction_disagree * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Violent
    *set cur_personality_reaction_Anwen ((reaction_liked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Murdering
    *set cur_personality_reaction_Anwen ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Slaying
    *set cur_personality_reaction_Anwen (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Stealing
    *set cur_personality_reaction_Anwen ((reaction_disagree * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Divine
    *set cur_personality_reaction_Anwen (reaction_neutral * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Arcane
    *set cur_personality_reaction_Anwen (reaction_neutral * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_f_Helping
    *set cur_personality_reaction_Anwen (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_f_Hindering
    *set cur_personality_reaction_Anwen ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*return

*comment This subroutine updates the personality reaction of Elena based on the current behavior as exhibited by the player's choice
*label UpdateReactionElena
*gosub UpdateCurrentAffinityEffectWolves

*if cur_behavior_tag = tag_Generous
    *set cur_personality_reaction_Elena (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Nice
    *set cur_personality_reaction_Elena (reaction_agree * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Peaceful
    *set cur_personality_reaction_Elena (reaction_agree * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Selfish
    *set cur_personality_reaction_Elena ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Mean
    *set cur_personality_reaction_Elena ((reaction_disliked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Violent
    *set cur_personality_reaction_Elena ((reaction_agree * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Murdering
    *set cur_personality_reaction_Elena ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Slaying
    *set cur_personality_reaction_Elena (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Stealing
    *set cur_personality_reaction_Elena ((reaction_disliked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Divine
    *set cur_personality_reaction_Elena (reaction_neutral * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Arcane
    *set cur_personality_reaction_Elena (reaction_neutral * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_f_Helping
    *set cur_personality_reaction_Elena (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_f_Hindering
    *set cur_personality_reaction_Elena ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*return

*comment This subroutine updates the personality reaction of Gwyn based on the current behavior as exhibited by the player's choice
*label UpdateReactionGwyn
*gosub UpdateCurrentAffinityEffectWolves

*if cur_behavior_tag = tag_Generous
    *set cur_personality_reaction_Gwyn (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Nice
    *set cur_personality_reaction_Gwyn (reaction_agree * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Peaceful
    *set cur_personality_reaction_Gwyn (reaction_disagree * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Selfish
    *set cur_personality_reaction_Gwyn ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Mean
    *set cur_personality_reaction_Gwyn ((reaction_disagree * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Violent
    *set cur_personality_reaction_Gwyn ((reaction_liked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Murdering
    *set cur_personality_reaction_Gwyn ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Slaying
    *set cur_personality_reaction_Gwyn (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Stealing
    *set cur_personality_reaction_Gwyn ((reaction_disliked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Divine
    *set cur_personality_reaction_Gwyn (reaction_neutral * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Arcane
    *set cur_personality_reaction_Gwyn (reaction_neutral * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_f_Helping
    *set cur_personality_reaction_Gwyn (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_f_Hindering
    *set cur_personality_reaction_Gwyn ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*return

*comment This subroutine updates the personality reaction of Leon based on the current behavior as exhibited by the player's choice
*label UpdateReactionLeon
*gosub UpdateCurrentAffinityEffectWolves

*if cur_behavior_tag = tag_Generous
    *set cur_personality_reaction_Leon (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Nice
    *set cur_personality_reaction_Leon (reaction_liked * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Peaceful
    *set cur_personality_reaction_Leon (reaction_neutral * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Selfish
    *set cur_personality_reaction_Leon ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Mean
    *set cur_personality_reaction_Leon ((reaction_disagree * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Violent
    *set cur_personality_reaction_Leon ((reaction_liked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Murdering
    *set cur_personality_reaction_Leon ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Slaying
    *set cur_personality_reaction_Leon (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Stealing
    *set cur_personality_reaction_Leon ((reaction_disliked * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Divine
    *set cur_personality_reaction_Leon (reaction_neutral * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_Arcane
    *set cur_personality_reaction_Leon (reaction_neutral * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_f_Helping
    *set cur_personality_reaction_Leon (reaction_loved * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*elseif cur_behavior_tag = tag_f_Hindering
    *set cur_personality_reaction_Leon ((reaction_hated * (0 - 1)) * (cur_severity_multiplier + cur_affinity_effect_Wolves))
*return

*comment This subroutine updates the total relationship value of the player with Cel
*label UpdateRelValCel
*set rel_val_Cel rel_val_Cel + cur_personality_reaction_Cel
*return

*comment This subroutine updates the total relationship value of the player with Ivy
*label UpdateRelValIvy
*set rel_val_Ivy rel_val_Ivy + cur_personality_reaction_Ivy
*return

*comment This subroutine updates the total relationship value of the player with Berthold
*label UpdateRelValBerthold
*set rel_val_Berthold rel_val_Berthold + cur_personality_reaction_Berthold
*return

*comment This subroutine updates the total relationship value of the player with Riva
*label UpdateRelValRiva
*set rel_val_Riva rel_val_Riva + cur_personality_reaction_Riva
*return

*comment This subroutine updates the total relationship value of the player with Winfred
*label UpdateRelValWinfred
*set rel_val_Winfred rel_val_Winfred + cur_personality_reaction_Winfred
*return


*comment This subroutine updates the total relationship value of the player with Rip
*label UpdateRelValRip
*set rel_val_Rip rel_val_Rip + cur_personality_reaction_Rip 
*return

*comment This subroutine updates the total relationship value of the player with Anwen
*label UpdateRelValAnwen
*set rel_val_Anwen rel_val_Anwen + cur_personality_reaction_Anwen
*return

*comment This subroutine updates the total relationship value of the player with Elena
*label UpdateRelValElena
*set rel_val_Elena rel_val_Elena + cur_personality_reaction_Elena
*return

*comment This subroutine updates the total relationship value of the player with Gwyn
*label UpdateRelValGwyn
*set rel_val_Gwyn rel_val_Gwyn + cur_personality_reaction_Gwyn
*return

*comment This subroutine updates the total relationship value of the player with Leon
*label UpdateRelValLeon
*set rel_val_Leon rel_val_Leon + cur_personality_reaction_Leon
*return

*comment This subroutine updates the total reputation value of the player with Flames
*comment Also determines if the player gets a bonus based on the choices severity if it is major or grandiose severity
*label UpdateRepValFlames
*if (cur_f_severity_value = f_severity_major) or (cur_f_severity_value = f_severity_grandiose)
    *if rep_status_Flames = rep_status_0
        *set cur_rep_bonus rep_bonus_excellent
    *elseif rep_status_Flames = rep_status_1
        *set cur_rep_bonus rep_bonus_positive
    *elseif rep_status_Flames = rep_status_2
        *set cur_rep_bonus rep_bonus_neutral
    *elseif rep_status_Flames = rep_status_3
        *set cur_rep_bonus (0 - rep_bonus_tense)
    *elseif rep_status_Flames = rep_status_4
        *set cur_rep_bonus (0 - rep_bonus_terrible)
*else
    *set cur_rep_bonus 0
    
*if cur_f_behavior_tag = tag_f_Helping
    *set rep_val_Flames rep_val_Flames + (cur_f_severity_value + cur_rep_bonus)
*elseif cur_f_behavior_tag = tag_f_Hindering
    *set rep_val_Flames rep_val_Flames + (((0 - 1) * (cur_f_severity_value)) + cur_rep_bonus)
*return

*comment This subroutine updates the total reputation value of the player with Wolves
*comment Also determines if the player gets a bonus based on the choices severity if it is major or grandiose severity
*label UpdateRepValWolves
*if (cur_f_severity_value = f_severity_major) or (cur_f_severity_value = f_severity_grandiose)
    *if rep_status_Wolves = rep_status_0
        *set cur_rep_bonus rep_bonus_excellent
    *elseif rep_status_Wolves = rep_status_1
        *set cur_rep_bonus rep_bonus_positive
    *elseif rep_status_Wolves = rep_status_2
        *set cur_rep_bonus rep_bonus_neutral
    *elseif rep_status_Wolves = rep_status_3
        *set cur_rep_bonus (0 - rep_bonus_tense)
    *elseif rep_status_Wolves = rep_status_4
        *set cur_rep_bonus (0 - rep_bonus_terrible)
*else
    *set cur_rep_bonus 0
    
*if cur_f_behavior_tag = tag_f_Helping
    *set rep_val_Wolves rep_val_Wolves + (cur_f_severity_value + cur_rep_bonus)
*elseif cur_f_behavior_tag = tag_f_Hindering
    *set rep_val_Wolves rep_val_Wolves + (((0 - 1) * (cur_f_severity_value)) + cur_rep_bonus)
*return